#include <iostream>
#include <vector>
#include <queue>
using namespace std;

bool canReach(vector<vector<int>>& a, int n, int m) {
    if (a[0][0] == 1 || a[n-1][m-1] == 1) return false;
    vector<vector<int>> vis(n, vector<int>(m, 0));
    queue<pair<int, int>> q;
    q.push(make_pair(0, 0));
    vis[0][0] = 1;
    int dr[4] = {1, -1, 0, 0}, dc[4] = {0, 0, 1, -1};

    while (!q.empty()) {
        pair<int, int> cell = q.front(); 
        q.pop();
        int r = cell.first, c = cell.second;
        if (r == n - 1 && c == m - 1) return true;

        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i], nc = c + dc[i];
            if (nr>=0 && nc>=0 && nr<n && nc<m && !vis[nr][nc] && a[nr][nc]==0) {
                vis[nr][nc] = 1;
                q.push(make_pair(nr, nc));
            }
        }
    }
    return false;
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> a(n, vector<int>(m));
    for (int i=0; i<n; i++)
        for (int j=0; j<m; j++)
            cin >> a[i][j];
    
    cout << (canReach(a, n, m) ? "true" : "false");
}
